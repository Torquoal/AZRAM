//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Scripts/XRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @XRInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputActions"",
    ""maps"": [
        {
            ""name"": ""XR"",
            ""id"": ""cec864c3-3a69-4f56-ab80-154c3f0847ef"",
            ""actions"": [
                {
                    ""name"": ""Reposition"",
                    ""type"": ""Button"",
                    ""id"": ""700f78e8-e243-4e10-b571-87c6269c1ced"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e45a482-4125-4456-b769-799e093d749f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reposition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XR
        m_XR = asset.FindActionMap("XR", throwIfNotFound: true);
        m_XR_Reposition = m_XR.FindAction("Reposition", throwIfNotFound: true);
    }

    ~@XRInputActions()
    {
        Debug.Assert(!m_XR.enabled, "This will cause a leak and performance issues, XRInputActions.XR.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XR
    private readonly InputActionMap m_XR;
    private List<IXRActions> m_XRActionsCallbackInterfaces = new List<IXRActions>();
    private readonly InputAction m_XR_Reposition;
    public struct XRActions
    {
        private @XRInputActions m_Wrapper;
        public XRActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reposition => m_Wrapper.m_XR_Reposition;
        public InputActionMap Get() { return m_Wrapper.m_XR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRActions set) { return set.Get(); }
        public void AddCallbacks(IXRActions instance)
        {
            if (instance == null || m_Wrapper.m_XRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRActionsCallbackInterfaces.Add(instance);
            @Reposition.started += instance.OnReposition;
            @Reposition.performed += instance.OnReposition;
            @Reposition.canceled += instance.OnReposition;
        }

        private void UnregisterCallbacks(IXRActions instance)
        {
            @Reposition.started -= instance.OnReposition;
            @Reposition.performed -= instance.OnReposition;
            @Reposition.canceled -= instance.OnReposition;
        }

        public void RemoveCallbacks(IXRActions instance)
        {
            if (m_Wrapper.m_XRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRActions instance)
        {
            foreach (var item in m_Wrapper.m_XRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRActions @XR => new XRActions(this);
    public interface IXRActions
    {
        void OnReposition(InputAction.CallbackContext context);
    }
}
